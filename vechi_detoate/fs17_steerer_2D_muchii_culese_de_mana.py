
# prolbmea este urmatoarea intre 1833 si 1834 exista un gol de muchie care separa 2 domenii deci astfel vede 2 domenii ca pe unul singur ... mai jos sunt nodurile care unite separa domeniile
'''
mai jos sunt listele care repeinta cele 7 sub-domenii ale domeniului 2D plan paralel 
AM CULES (COPIAT) MANUAL MUCHIILE CARE DETERMINA CELE 7 DOMENII: 
NE AFLAM IN 2D PALN PARALEL PLAN X0Y, FIGURA E CENTRATA IN P(0,0,0) CU Z = 0 , 
CADRANELE SUNT NUMEROTATE IN SENS TRIONOMTETRIC 
CADRAN I = (X > 0, Y > 0) 
CADRAN II = (X < 0, Y > 0) 
CADRAN III = (X < 0, Y < 0) 
CADRAN IV = (X > 0, Y < 0) 
'''
import matplotlib.pyplot as plt
import numpy as np
### ------------------------------------------------------------ #### 
### bobina stanga sus = DD1 (CADRAN 2) 

DD1= np.array([238, 297, 360, 432, 479, 542, 545, 546, 547, 549, 548, 579, 648, 578, 584, 653, 712, 713, 654, 586, 518, 456, 427, 364, 355, 292, 230, 169, 167, 168, 121, 123, 176, 179])
### ------------------------------------------------------- 
### bobina stanga jos = DD2 (CADRAN 3) 
DD2 =np.array([37, 77, 127, 182, 242, 277, 338, 403, 466, 531, 598, 666, 661, 593, 526, 461, 398, 334, 274, 212, 153, 145,98, 100, 149, 150, 185, 216, 278, 306, 307, 365, 366, 367, 309, 310, 308, 249, 189, 134,87, 46, 44, 26, 24, 22, 23])
### ----------------------------------------------------- 
### bobina dreapta sus = DD3 (CADRAN 1) 
DD3 = np.array([1384, 1424, 1458, 1492, 1526, 1559, 1594, 1627, 1660, 1692, 1727, 1746, 1777, 1791, 1814, 1813, 1812, 1811, 1810, 1794, 1764, 1731, 1696, 1663, 1628, 1595, 1561, 1528, 1494, 1461, 1427, 1417, 1416, 1379, 1380, 1381])
### ----------------------------------------------------- 
### bobina dreapta jos = DD4 (CADRAN 4) 
DD4 = np.array([1406, 1443, 1481, 1518, 1550, 1585, 1621, 1652, 1655, 1656, 1683, 1650, 1618, 1607, 1601, 1568, 1539, 1505,1522, 1547, 1548, 1546, 1521, 1485, 1449, 1412, 1371, 1326, 1275, 1274, 1323, 1366, 1367])
### ============================================= 
### JUG SUS = DD5 (CADRAN 1 + CADRAN 2) 
DD5 = np.array([411, 470, 536, 604, 673, 729, 780, 825, 861, 895, 925, 952, 954, 981, 1022, 1066, 1126, 1186, 1199, 1258, 1312, 1359, 1402, 1438, 1470, 1501, 1533, 1566, 1600, 1632, 1667, 1699, 1700, 1709, 1744, 1775, 1801, 1823, 1824, 1802, 1821, 1822, 1807, 1783, 1784, 1793, 1826, 1818, 1832, 1833, 1834, 1815, 1803, 1778, 1760, 1749, 1715, 1679, 1646, 1624, 1591, 1558, 1525, 1491, 1457, 1423, 1383, 1340, 1291, 1337, 1338, 1335, 1285, 1228, 1166, 1104, 1077, 1136, 1137, 1190, 1191, 1193, 1192, 1188, 1129, 1123, 1062, 1015, 974, 945, 917, 885, 849, 808, 762, 710, 650, 581, 576, 577, 646, 707, 756, 784, 735, 682, 681, 678, 677, 610, 544, 481, 424, 361, 354, 288, 235, 178, 125, 122, 75, 116, 118, 117, 73, 115, 114, 65, 60, 63, 109, 162, 224, 285, 348, 349])
############################################################################### 
### JUG JOS = DD6 (CADRAN 3 + CADRAN 4) 
DD6 = np.array([109, 63, 60, 65, 114, 79, 39, 21, 18, 8, 9, 11, 25, 27, 47, 90, 137, 192, 193, 251, 312, 375, 435, 436, 434, 490, 492, 491, 489, 454, 510, 569, 513, 507, 452, 391, 387, 325, 323, 322, 321, 320, 333, 395, 457, 488, 551, 619, 642, 702, 755, 801, 843, 878, 909, 935, 962, 987, 986, 985, 970, 999, 1000, 1001, 1002, 998, 1003, 1043, 1097, 1159, 1217, 1273, 1219, 1220, 1223, 1278, 1329, 1373, 1414, 1451, 1484, 1478, 1479, 1477, 1502, 1536, 1569, 1570, 1571, 1572, 1602, 1634, 1640, 1651, 1684, 1719, 1751, 1754, 1783, 1807, 1822, 1821, 1802, 1776, 1745, 1711, 1677, 1645, 1614, 1580, 1579, 1545, 1511, 1476, 1441, 1404, 1362, 1316, 1264, 1206, 1147, 1089, 1037, 1031, 992, 965, 939, 911, 879, 873, 870, 836, 792, 743, 688, 625, 559, 498, 441, 381, 319, 260, 201, 200, 144, 97, 62 ])
### ============================================ 
### Vacuum (CADRAN 1 + CADRAN 2 + CADRAN 3 + CADRAN 4) 

DD7 = np.array([114, 115, 73, 117, 118, 116, 75, 122, 125, 178, 235, 288, 354, 361, 424, 481, 544, 610, 677, 678, 681, 682, 735, 784, 756, 707, 646, 577, 576, 581, 650, 710, 762, 808, 849, 885, 917, 945, 974, 1015, 1062, 1123, 1129, 1188, 1192, 1193, 1191, 1190, 1137, 1136, 1077, 1104, 1166, 1228, 1285, 1335, 1338, 1337, 1291, 1340, 1383, 1423, 1457, 1491, 1525, 1558, 1591, 1624, 1646, 1679, 1715, 1749, 1760, 1778, 1803, 1815, 1834, 1833, 1832, 1818, 1826, 1793, 1784, 1783, 1754, 1751, 1719, 1684, 1651, 1640, 1634, 1602, 1572, 1571, 1570, 1569, 1536, 1502, 1477, 1479, 1478, 1484, 1451, 1414, 1373, 1329, 1278, 1223, 1220, 1219, 1273, 1217, 1159, 1097, 1043, 1003, 998, 1002, 1001, 1000, 999, 970, 985, 986, 987, 962, 935, 909, 878, 843, 801, 755, 702, 642, 619, 551, 488, 457, 395,333, 320, 321, 322, 323, 325, 387, 391, 452, 507, 513, 569, 510, 454, 489, 491, 492, 490, 434, 436, 435, 375, 312, 251, 193, 192, 137, 90, 47, 27, 25, 11, 9,8, 18, 21, 39, 79])

import matplotlib.pyplot as plt
import numpy as np

# ==============================
#  Subdomenii (liste de noduri)
# ==============================

DD1 = np.array([238, 297, 360, 432, 479, 542, 545, 546, 547, 549, 548, 579, 648, 578, 584, 653, 712, 713, 654, 586, 518, 456, 427, 364, 355, 292, 230, 169, 167, 168, 121, 123, 176, 179])
DD2 = np.array([37, 77, 127, 182, 242, 277, 338, 403, 466, 531, 598, 666, 661, 593, 526, 461, 398, 334, 274, 212, 153, 145, 98, 100, 149, 150, 185, 216, 278, 306, 307, 365, 366, 367, 309, 310, 308, 249, 189, 134, 87, 46, 44, 26, 24, 22, 23])
DD3 = np.array([1384, 1424, 1458, 1492, 1526, 1559, 1594, 1627, 1660, 1692, 1727, 1746, 1777, 1791, 1814, 1813, 1812, 1811, 1810, 1794, 1764, 1731, 1696, 1663, 1628, 1595, 1561, 1528, 1494, 1461, 1427, 1417, 1416, 1379, 1380, 1381])
DD4 = np.array([1406, 1443, 1481, 1518, 1550, 1585, 1621, 1652, 1655, 1656, 1683, 1650, 1618, 1607, 1601, 1568, 1539, 1505, 1522, 1547, 1548, 1546, 1521, 1485, 1449, 1412, 1371, 1326, 1275, 1274, 1323, 1366, 1367])
DD5 = np.array([411, 470, 536, 604, 673, 729, 780, 825, 861, 895, 925, 952, 954, 981, 1022, 1066, 1126, 1186, 1199, 1258, 1312, 1359, 1402, 1438, 1470, 1501, 1533, 1566, 1600, 1632, 1667, 1699, 1700, 1709, 1744, 1775, 1801, 1823, 1824, 1802, 1821, 1822, 1807, 1783, 1784, 1793, 1826, 1818, 1832, 1833, 1834, 1815, 1803, 1778, 1760, 1749, 1715, 1679, 1646, 1624, 1591, 1558, 1525, 1491, 1457, 1423, 1383, 1340, 1291, 1337, 1338, 1335, 1285, 1228, 1166, 1104, 1077, 1136, 1137, 1190, 1191, 1193, 1192, 1188, 1129, 1123, 1062, 1015, 974, 945, 917, 885, 849, 808, 762, 710, 650, 581, 576, 577, 646, 707, 756, 784, 735, 682, 681, 678, 677, 610, 544, 481, 424, 361, 354, 288, 235, 178, 125, 122, 75, 116, 118, 117, 73, 115, 114, 65, 60, 63, 109, 162, 224, 285, 348, 349])
DD6 = np.array([109, 63, 60, 65, 114, 79, 39, 21, 18, 8, 9, 11, 25, 27, 47, 90, 137, 192, 193, 251, 312, 375, 435, 436, 434, 490, 492, 491, 489, 454, 510, 569, 513, 507, 452, 391, 387, 325, 323, 322, 321, 320, 333, 395, 457, 488, 551, 619, 642, 702, 755, 801, 843, 878, 909, 935, 962, 987, 986, 985, 970, 999, 1000, 1001, 1002, 998, 1003, 1043, 1097, 1159, 1217, 1273, 1219, 1220, 1223, 1278, 1329, 1373, 1414, 1451, 1484, 1478, 1479, 1477, 1502, 1536, 1569, 1570, 1571, 1572, 1602, 1634, 1640, 1651, 1684, 1719, 1751, 1754, 1783, 1807, 1822, 1821, 1802, 1776, 1745, 1711, 1677, 1645, 1614, 1580, 1579, 1545, 1511, 1476, 1441, 1404, 1362, 1316, 1264, 1206, 1147, 1089, 1037, 1031, 992, 965, 939, 911, 879, 873, 870, 836, 792, 743, 688, 625, 559, 498, 441, 381, 319, 260, 201, 200, 144, 97, 62])
DD7 = np.array([114, 115, 73, 117, 118, 116, 75, 122, 125, 178, 235, 288, 354, 361, 424, 481, 544, 610, 677, 678, 681, 682, 735, 784, 756, 707, 646, 577, 576, 581, 650, 710, 762, 808, 849, 885, 917, 945, 974, 1015, 1062, 1123, 1129, 1188, 1192, 1193, 1191, 1190, 1137, 1136, 1077, 1104, 1166, 1228, 1285, 1335, 1338, 1337, 1291, 1340, 1383, 1423, 1457, 1491, 1525, 1558, 1591, 1624, 1646, 1679, 1715, 1749, 1760, 1778, 1803, 1815, 1834, 1833, 1832, 1818, 1826, 1793, 1784, 1783, 1754, 1751, 1719, 1684, 1651, 1640, 1634, 1602, 1572, 1571, 1570, 1569, 1536, 1502, 1477, 1479, 1478, 1484, 1451, 1414, 1373, 1329, 1278, 1223, 1220, 1219, 1273, 1217, 1159, 1097, 1043, 1003, 998, 1002, 1001, 1000, 999, 970, 985, 986, 987, 962, 935, 909, 878, 843, 801, 755, 702, 642, 619, 551, 488, 457, 395, 333, 320, 321, 322, 323, 325, 387, 391, 452, 507, 513, 569, 510, 454, 489, 491, 492, 490, 434, 436, 435, 375, 312, 251, 193, 192, 137, 90, 47, 27, 25, 11, 9, 8, 18, 21, 39, 79])

subdomains = [
    ("DD1", DD1),
    ("DD2", DD2),
    ("DD3", DD3),
    ("DD4", DD4),
    ("DD5", DD5),
    ("DD6", DD6),
    ("DD7", DD7)
]

# ==========================================================
# Funcție pentru ordonarea automată a nodurilor (contur)
# ==========================================================
def order_nodes_clockwise(nodes, node_list):
    pts = nodes[node_list]
    cx, cy = pts[:, 0].mean(), pts[:, 1].mean()
    angles = np.arctan2(pts[:, 1] - cy, pts[:, 0] - cx)
    order = np.argsort(angles)
    return node_list[order]

# ==========================================================
# Plotare subdomenii
# ==========================================================
def plot_subdomains_as_is(nodes, subdomains, auto_order=False):
    plt.figure(figsize=(10, 10))
    cmap = plt.cm.get_cmap("tab10", len(subdomains))

    for i, (name, node_list) in enumerate(subdomains):
        node_list = np.array(node_list, dtype=int)

        if auto_order:
            node_list = order_nodes_clockwise(nodes, node_list)

        # închidem conturul
        if node_list[0] != node_list[-1]:
            node_list = np.append(node_list, node_list[0])

        x = nodes[node_list, 0]
        y = nodes[node_list, 1]

        plt.plot(x, y, '-o', markersize=3, color=cmap(i), label=name)

    plt.gca().set_aspect("equal")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.title("Subdomenii pe planul XY")
    plt.legend(fontsize="small")
    plt.show()
